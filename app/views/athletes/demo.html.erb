<div class="box">
	<h1>Details for <%= @athlete.name %></h1>

	<div class="details">
		<% if @athlete.graduating_class %>
			Class of <%= @athlete.graduating_class %>
		<% end %>
		<br>
		<% if @athlete.url %>
			<a href="<%= @athlete.url %>"><%= @athlete.url %></a>
		<% end %>
	</div>

	<% if @athlete.has_data? %>

		<ul class="event-list group">
			<% @marks_by_event.keys.each do |key| %>
				<li class="event-list-item" data-name="<%= key.gsub(" ", "-") %>">
					<%= key %>
				</li>
			<% end %>
		</ul>

		<% @marks_by_event.keys.each_with_index do |event_name, idx| %>
			<div id="<%= event_name.gsub(" ", "-") %>" class="graph <%= "invisible" unless idx == 0 %>"></div>
		<% end %>

	<% end %>

	<a href="<%= root_url %>">Back Home...</a>

</div>

<script>
$(function () {
	var athlete_data;
	var isMobile = screen.width <= 480;
	// var containerWidth = $($("#container")[0]).width();
	var containerWidth = 938;
	var currentGraph = $($(".graph").not(".invisible")[0]);
	
	$.get("/athletes/<%=raw @athlete.id %>/graph_data", function (data) {
		athlete_data = data;

		for (var key in athlete_data) {
			
			$("#" + key.replace(" ", "-")).highcharts({
				chart: { 
					type: "line",
					backgroundColor: "#FEFEFE",
					width: containerWidth
				},
				title: { text: key },
				tooltip: {
					enabled: true,
					formatter: function () {
						var formattedY;
						var eventName = this.series.chart.title.text;
						if (athlete_data[eventName].is_running_event) {
							formattedY = this.y.formatTime();
						} else {
							formattedY = this.y.toFixed(2);
						}

						return '<b>' + this.series.name + '</b><br>' + 
						this.x +': '+ formattedY;
					}
				},
				plotOptions: {
					line: {
						dataLabels: { 
							enabled: isMobile,
							formatter: function () {
								var formattedY;
								var eventName = this.series.chart.title.text;
								if (athlete_data[eventName].is_running_event) {
									formattedY = this.y.formatTime();
								} else {
									formattedY = this.y.toFixed(2);
								}
								
								return formattedY;
							}
						}
					}
				},
				xAxis: { categories: athlete_data[key].years },
				yAxis: { 
					title: { text: athlete_data[key].units },
					labels: {
						formatter: function () {
							var eventName = this.chart.title.text;
							if (athlete_data[eventName].is_running_event) {
								return this.value.formatTime();
							} else {
								return this.value.toFixed(2);
							}
						}
					}
				},
				series: athlete_data[key].series
			})
		}

	});
	
	$(".event-list-item").on("click", function (event) {
		var eventId = $(event.target).data("name");
		
		currentGraph.toggleClass("invisible");
		$("#" + eventId).toggleClass("invisible");
		currentGraph = $("#" + eventId);
	});

});
</script>